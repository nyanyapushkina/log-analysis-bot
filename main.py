import os
import re
import asyncio
from aiogram import Bot, Dispatcher, F
from aiogram.types import Message
from aiogram.filters import Command
from dotenv import load_dotenv
import logging
import yaml

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
load_dotenv()
TOKEN = os.getenv('BOT_TOKEN')

# –°–æ–∑–¥–∞—ë–º –ø–∞–ø–∫–∏ –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
os.makedirs('logs', exist_ok=True)
os.makedirs('config', exist_ok=True)

# –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤
CONFIG_PATH = 'config/filters.yaml'
DEFAULT_CONFIG = {
    'filters': [
        {
            'name': '–û—à–∏–±–∫–∏',
            'pattern': r'ERROR|CRITICAL|FAILED|EXCEPTION',
            'enabled': True
        },
        {
            'name': '–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è',
            'pattern': r'WARNING',
            'enabled': True
        },
        {
            'name': '–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è',
            'pattern': r'AUTH|LOGIN|LOGOUT|SESSION',
            'enabled': False
        }
    ],
    'log_file': 'logs/logs.log',
    'max_lines': 1000
}

def load_config():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∏–ª–∏ —Å–æ–∑–¥–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª"""
    if not os.path.exists(CONFIG_PATH):
        with open(CONFIG_PATH, 'w') as f:
            yaml.dump(DEFAULT_CONFIG, f, allow_unicode=True)
        return DEFAULT_CONFIG
    with open(CONFIG_PATH) as f:
        return yaml.safe_load(f)

config = load_config()

class LogAnalyzer:
    def __init__(self):
        self.filters = [f for f in config['filters'] if f['enabled']]
        self.log_file = config['log_file']
        self.max_lines = config['max_lines']

    def analyze_logs(self):
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ª–æ–≥–∏ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã"""
        results = {f['name']: [] for f in self.filters}
        
        try:
            with open(self.log_file, 'r', encoding='utf-8') as f:
                lines = f.readlines()[-self.max_lines:]
                
            for line in lines:
                for filter in self.filters:
                    if re.search(filter['pattern'], line, re.IGNORECASE):
                        results[filter['name']].append(line.strip())
                        break
            
            return results
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –ª–æ–≥–æ–≤: {e}")
            return None

    def format_results(self, results):
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏"""
        if not results:
            return "–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ª–æ–≥–∏"
            
        message = []
        for filter_name, lines in results.items():
            if lines:
                message.append(f"üìç {filter_name} ({len(lines)}):")
                message.extend(lines[-20:])  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 –∑–∞–ø–∏—Å–µ–π –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞ 
                message.append("") 
        
        return "\n".join(message) if message else "–ù–µ—Ç –∑–∞–ø–∏—Å–µ–π, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö —Ñ–∏–ª—å—Ç—Ä–∞–º"

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=TOKEN)
dp = Dispatcher()
analyzer = LogAnalyzer()

async def send_welcome(message: Message):
    """–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º–∏"""
    active_filters = "\n".join(
        f"‚Ä¢ {f['name']} ({f['pattern']})" 
        for f in config['filters'] 
        if f['enabled']
    )
    
    await message.reply(
        f"üìã –ë–æ—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ª–æ–≥–æ–≤\n\n"
        f"–ê–∫—Ç–∏–≤–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã:\n{active_filters}\n\n"
        f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É /logs –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –ª–æ–≥–æ–≤"
    )

async def send_logs(message: Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ª–æ–≥–æ–≤"""
    await message.reply("–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –ª–æ–≥–∏...")
    
    try:
        results = await asyncio.to_thread(analyzer.analyze_logs)
        formatted = analyzer.format_results(results)
        
        if len(formatted) > 4000:
            for chunk in [formatted[i:i+4000] for i in range(0, len(formatted), 4000)]:
                await message.answer(chunk)
        else:
            await message.answer(formatted)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã: {e}")
        await message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")

async def handle_document(message: Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –ª–æ–≥–æ–≤"""
    if not message.document.file_name.endswith('.log'):
        await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ–º .log")
        return
    
    try:
        file_id = message.document.file_id
        file = await bot.get_file(file_id)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        file_path = f"logs/{file_id}.log"
        
        # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
        await bot.download_file(file.file_path, file_path)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ª–æ–≥–∞–º –≤ –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–µ
        analyzer.log_file = file_path
        
        await message.reply("–§–∞–π–ª –ª–æ–≥–æ–≤ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /logs –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞: {e}")
        await message.reply(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞: {e}")

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
dp.message.register(send_welcome, Command(commands=['start', 'help']))
dp.message.register(send_logs, Command(commands='logs'))
dp.message.register(handle_document, F.document)

async def main():
    await dp.start_polling(bot)

if __name__ == '__main__':
    logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    asyncio.run(main())
